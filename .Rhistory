ni/(ncol(x)*nrow(x)) * 100
dl <- qu
replaced <- imputeBDLs(x, dl=dl, eps=0.1, method="pls",
verbose=TRUE, R=50, variation=TRUE)$x #, nComp=rep(10,ncol(x)))$x
maxit=10; eps=0.1; method="pls";
dl=rep(0.05, ncol(x)); 	nComp = "boot";
bruteforce=FALSE;  noisemethod="residuals";
noise=FALSE; R=10; correction="normal";
verbose=TRUE; variation = TRUE
####################################
###   data   #######################
set.seed(123)
#source("../impRZilr.R", echo=FALSE, encoding="UTF-8")
#source("../isomLR.R")
require(MASS)
n <- 50
latent <- mvrnorm(n, mu=rep(1,3), Sigma=diag(3))
genVars <- function(latent, p){
part1 <- matrix(,ncol=p, nrow=n)
for(i in 1:50){
part1[,i] <- runif(n, -0.2, 0.2) + latent %*% rnorm(3, 1, 0.2)
}
for(i in 51:75){
part1[,i] <- cbind(1,latent) %*% c(rnorm(1), rnorm(3, 1, 1))*(-1)
}
for(i in 76:100){
part1[,i] <- cbind(1,latent) %*% c(rnorm(1), rgamma(3, 1))
}
exp(part1)
}
x <- xorig <- genVars(latent, 100)
# pairs(cbind(latent,x[,95:105]))
set.seed(123)
s <- sample(c(rep(0,50), seq(0, 0.075, length.out=50)), 100, replace=TRUE)
qu <- numeric(100)
for(i in 1:ncol(x)){
qu[i] <- quantile(x[,i], s[i])
x[x[,i] < qu[i], i] <- 0
}
ni <- sum(x==0, na.rm=TRUE)
ni/(ncol(x)*nrow(x)) * 100
dl <- qu
x <- data.frame(x)
replaced <- imputeBDLs(x, dl=dl, eps=0.1, method="pls", variation=TRUE,
verbose=TRUE, R=10)$x #, nComp=rep(10,ncol(x)))$x
replaced <- imputeBDLs(x, dl=dl, eps=0.1, method="pls",
verbose=TRUE, R=50, variation=TRUE)$x #, nComp=rep(10,ncol(x)))$x
set.seed(123)
#source("../impRZilr.R", echo=FALSE, encoding="UTF-8")
#source("../isomLR.R")
require(MASS)
latent <- mvrnorm(200, mu=rep(1,3), Sigma=diag(3))
genVars <- function(latent, p){
part1 <- matrix(,ncol=p, nrow=200)
for(i in 1:50){
part1[,i] <- runif(200, -0.2, 0.2) + latent %*% rnorm(3, 1, 0.2)
}
for(i in 51:75){
part1[,i] <- cbind(1,latent) %*% c(rnorm(1), rnorm(3, 1, 1))*(-1)
}
for(i in 76:100){
part1[,i] <- cbind(1,latent) %*% c(rnorm(1), rgamma(3, 1))
}
exp(part1)
}
x <- xorig <- genVars(latent, 100)
# pairs(cbind(latent,x[,95:105]))
qu <- apply(x, 2, quantile, 0.05)
for(i in 1:ncol(x)){
x[x[,i] < qu[i], i] <- 0
}
ni <- sum(x==0, na.rm=TRUE)
ni/(ncol(x)*nrow(x)) * 100
dl <- qu
replaced <- imputeBDLs(x, dl=dl, eps=0.1, method="pls",
verbose=TRUE, R=50, variation=TRUE)$x #, nComp=rep(10,ncol(x)))$x
x <- data.frame(x)
replaced <- imputeBDLs(x, dl=dl, eps=0.1, method="pls",
verbose=TRUE, R=50, variation=TRUE)$x #, nComp=rep(10,ncol(x)))$x
head(x)
class(x[,2])
class(x[,1])
lapply(x, class)
replaced <- imputeBDLs(x, dl=dl, eps=0.1, method="pls",
verbose=TRUE, R=50, variation=TRUE)$x #, nComp=rep(10,ncol(x)))$x
head(x,2)
dim(x)
class9x
class(x)
set.seed(123)
#source("../impRZilr.R", echo=FALSE, encoding="UTF-8")
#source("../isomLR.R")
require(MASS)
n <- 50
latent <- mvrnorm(n, mu=rep(1,3), Sigma=diag(3))
genVars <- function(latent, p){
part1 <- matrix(,ncol=p, nrow=n)
for(i in 1:50){
part1[,i] <- runif(n, -0.2, 0.2) + latent %*% rnorm(3, 1, 0.2)
}
for(i in 51:75){
part1[,i] <- cbind(1,latent) %*% c(rnorm(1), rnorm(3, 1, 1))*(-1)
}
for(i in 76:100){
part1[,i] <- cbind(1,latent) %*% c(rnorm(1), rgamma(3, 1))
}
exp(part1)
}
x <- xorig <- genVars(latent, 100)
# pairs(cbind(latent,x[,95:105]))
set.seed(123)
qu <- apply(x, 2, quantile, 0.05)
for(i in 1:ncol(x)){
x[x[,i] < qu[i], i] <- 0
}
ni <- sum(x==0, na.rm=TRUE)
ni/(ncol(x)*nrow(x)) * 100
dl <- qu
x <- data.frame(x)
replaced <- imputeBDLs(x, dl=dl, eps=0.1, method="pls",
verbose=TRUE, R=50, variation=TRUE)$x #, nComp=rep(10,ncol(x)))$x
head(x)
dim(x)
dl
ni/(ncol(x)*nrow(x)) * 100
sum(x==0, na.rm=TRUE)
replaced <- imputeBDLs(x, dl=dl, eps=0.1, method="pls",
verbose=TRUE, R=50, variation=TRUE)$x #, nComp=rep(10,ncol(x)))$x
traceback()
set.seed(123)
#source("../impRZilr.R", echo=FALSE, encoding="UTF-8")
#source("../isomLR.R")
require(MASS)
n <- 50
latent <- mvrnorm(n, mu=rep(1,3), Sigma=diag(3))
genVars <- function(latent, p){
part1 <- matrix(,ncol=p, nrow=n)
for(i in 1:50){
part1[,i] <- runif(n, -0.2, 0.2) + latent %*% rnorm(3, 1, 0.2)
}
for(i in 51:75){
part1[,i] <- cbind(1,latent) %*% c(rnorm(1), rnorm(3, 1, 1))*(-1)
}
for(i in 76:100){
part1[,i] <- cbind(1,latent) %*% c(rnorm(1), rgamma(3, 1))
}
exp(part1)
}
x <- xorig <- genVars(latent, 100)
# pairs(cbind(latent,x[,95:105]))
set.seed(123)
s <- sample(c(rep(0,50), seq(0, 0.075, length.out=50)), 100, replace=TRUE)
qu <- numeric(100)
for(i in 1:ncol(x)){
qu[i] <- quantile(x[,i], s[i])
x[x[,i] < qu[i], i] <- 0
}
ni <- sum(x==0, na.rm=TRUE)
ni/(ncol(x)*nrow(x)) * 100
dl <- qu
x <- data.frame(x)
replaced <- imputeBDLs(x, dl=dl, eps=0.1, method="pls",
verbose=TRUE, R=50, variation=TRUE)$x #, nComp=rep(10,ncol(x)))$x
head(x)
set.seed(123)
#source("../impRZilr.R", echo=FALSE, encoding="UTF-8")
#source("../isomLR.R")
require(MASS)
n <- 50
latent <- mvrnorm(n, mu=rep(1,3), Sigma=diag(3))
genVars <- function(latent, p){
part1 <- matrix(,ncol=p, nrow=n)
for(i in 1:50){
part1[,i] <- runif(n, -0.2, 0.2) + latent %*% rnorm(3, 1, 0.2)
}
for(i in 51:75){
part1[,i] <- cbind(1,latent) %*% c(rnorm(1), rnorm(3, 1, 1))*(-1)
}
for(i in 76:100){
part1[,i] <- cbind(1,latent) %*% c(rnorm(1), rgamma(3, 1))
}
exp(part1)
}
x <- xorig <- genVars(latent, 100)
# pairs(cbind(latent,x[,95:105]))
set.seed(123)
qu <- apply(x, 2, quantile, 0.05)
qu
s <- sample(c(rep(0,50), seq(0, 0.075, length.out=50)), 100, replace=TRUE)
s
set.seed(123)
#source("../impRZilr.R", echo=FALSE, encoding="UTF-8")
#source("../isomLR.R")
require(MASS)
n <- 50
latent <- mvrnorm(n, mu=rep(1,3), Sigma=diag(3))
genVars <- function(latent, p){
part1 <- matrix(,ncol=p, nrow=n)
for(i in 1:50){
part1[,i] <- runif(n, -0.2, 0.2) + latent %*% rnorm(3, 1, 0.2)
}
for(i in 51:75){
part1[,i] <- cbind(1,latent) %*% c(rnorm(1), rnorm(3, 1, 1))*(-1)
}
for(i in 76:100){
part1[,i] <- cbind(1,latent) %*% c(rnorm(1), rgamma(3, 1))
}
exp(part1)
}
x <- xorig <- genVars(latent, 100)
# pairs(cbind(latent,x[,95:105]))
set.seed(123)
qu <- apply(x, 2, quantile, 0.05)
for(i in 1:ncol(x)){
x[x[,i] < qu[i], i] <- 0
}
ni <- sum(x==0, na.rm=TRUE)
ni/(ncol(x)*nrow(x)) * 100
dl <- qu
x <- data.frame(x)
debugonce(imputeBDLs)
replaced <- imputeBDLs(x, dl=dl, eps=0.1, method="pls",
verbose=TRUE, R=50, variation=TRUE)$x #, nComp=rep(10,ncol(x)))$x
debugonce(adjustImputed)
debugonce(imputeBDLs)
replaced <- imputeBDLs(x, dl=dl, eps=0.1, method="pls",
verbose=TRUE, R=50, variation=TRUE)$x #, nComp=rep(10,ncol(x)))$x
head(xinv,2)
head(xneworder,2)
head(w2[, cols],2)
debugonce(adjustImputed)
debugonce(imputeBDLs)
replaced <- imputeBDLs(x, dl=dl, eps=0.1, method="pls",
verbose=TRUE, R=50, variation=TRUE)$x #, nComp=rep(10,ncol(x)))$x
debugonce(adjustImputed)
length(s1)
xOrig[,1:5]
xImp[,1:5]
dim(wind)
dim(xOrig)
dim(xImp)
any(is.na(xImp))
any(is.na(xOrig))
any(is.na(wind))
length(sumPrevious)
debugonce(imputeBDLs)
replaced <- imputeBDLs(x, dl=dl, eps=0.1, method="pls",
verbose=TRUE, R=50, variation=TRUE)$x #, nComp=rep(10,ncol(x)))$x
debugonce(adjustImputed)
sum(xOrig[i, !wind[i, ]])
xOrig[i, !wind[i, ]]
wind[i,]
xOrig[i, wind[i,]
]
sum(xImp[i, !wind[i, ]])
xImp[i, !wind[i, ]]
xOrig[i, !wind[i, ]]
class(xImp)
wind[i, ]
any(wind[i, ])
any(wind[i, ]) & !all(wind[i,])
all(wind[i,])
library(robCompositions)
maxit=10; eps=0.1; method="pls";
dl=rep(0.05, ncol(x)); 	nComp = "boot";
bruteforce=FALSE;  noisemethod="residuals";
noise=FALSE; R=10; correction="normal";
verbose=TRUE; variation = TRUE
####################################
###   data   #######################
set.seed(123)
#source("../impRZilr.R", echo=FALSE, encoding="UTF-8")
#source("../isomLR.R")
require(MASS)
n <- 50
latent <- mvrnorm(n, mu=rep(1,3), Sigma=diag(3))
genVars <- function(latent, p){
part1 <- matrix(,ncol=p, nrow=n)
for(i in 1:50){
part1[,i] <- runif(n, -0.2, 0.2) + latent %*% rnorm(3, 1, 0.2)
}
for(i in 51:75){
part1[,i] <- cbind(1,latent) %*% c(rnorm(1), rnorm(3, 1, 1))*(-1)
}
for(i in 76:100){
part1[,i] <- cbind(1,latent) %*% c(rnorm(1), rgamma(3, 1))
}
exp(part1)
}
x <- xorig <- genVars(latent, 100)
# pairs(cbind(latent,x[,95:105]))
set.seed(123)
s <- sample(c(rep(0,50), seq(0, 0.075, length.out=50)), 100, replace=TRUE)
qu <- numeric(100)
for(i in 1:ncol(x)){
qu[i] <- quantile(x[,i], s[i])
x[x[,i] < qu[i], i] <- 0
}
ni <- sum(x==0, na.rm=TRUE)
ni/(ncol(x)*nrow(x)) * 100
dl <- qu
x <- data.frame(x)
replaced <- imputeBDLs(x, dl=dl, eps=0.1, method="pls", variation=TRUE,
verbose=TRUE, R=10)$x #, nComp=rep(10,ncol(x)))$x
rm(list=ls())
set.seed(123)
#source("../impRZilr.R", echo=FALSE, encoding="UTF-8")
#source("../isomLR.R")
require(MASS)
n <- 50
latent <- mvrnorm(n, mu=rep(1,3), Sigma=diag(3))
genVars <- function(latent, p){
part1 <- matrix(,ncol=p, nrow=n)
for(i in 1:50){
part1[,i] <- runif(n, -0.2, 0.2) + latent %*% rnorm(3, 1, 0.2)
}
for(i in 51:75){
part1[,i] <- cbind(1,latent) %*% c(rnorm(1), rnorm(3, 1, 1))*(-1)
}
for(i in 76:100){
part1[,i] <- cbind(1,latent) %*% c(rnorm(1), rgamma(3, 1))
}
exp(part1)
}
x <- xorig <- genVars(latent, 100)
# pairs(cbind(latent,x[,95:105]))
set.seed(123)
qu <- apply(x, 2, quantile, 0.05)
for(i in 1:ncol(x)){
x[x[,i] < qu[i], i] <- 0
}
ni <- sum(x==0, na.rm=TRUE)
ni/(ncol(x)*nrow(x)) * 100
dl <- qu
x <- data.frame(x)
replaced <- imputeBDLs(x, dl=dl, eps=0.1, method="pls",
verbose=TRUE, R=50, variation=TRUE)$x #, nComp=rep(10,ncol(x)))$x
set.seed(123)
#source("../impRZilr.R", echo=FALSE, encoding="UTF-8")
#source("../isomLR.R")
require(MASS)
n <- 50
latent <- mvrnorm(n, mu=rep(1,3), Sigma=diag(3))
genVars <- function(latent, p){
part1 <- matrix(,ncol=p, nrow=n)
for(i in 1:50){
part1[,i] <- runif(n, -0.2, 0.2) + latent %*% rnorm(3, 1, 0.2)
}
for(i in 51:75){
part1[,i] <- cbind(1,latent) %*% c(rnorm(1), rnorm(3, 1, 1))*(-1)
}
for(i in 76:100){
part1[,i] <- cbind(1,latent) %*% c(rnorm(1), rgamma(3, 1))
}
exp(part1)
}
x <- xorig <- genVars(latent, 100)
# pairs(cbind(latent,x[,95:105]))
set.seed(123)
qu <- apply(x, 2, quantile, 0.05)
for(i in seq(1, ncol(x), 2)){
x[x[,i] < qu[i], i] <- 0
}
ni <- sum(x==0, na.rm=TRUE)
ni/(ncol(x)*nrow(x)) * 100
dl <- qu
x <- data.frame(x)
replaced <- imputeBDLs(x, dl=dl, eps=0.1, method="pls",
verbose=TRUE, R=50, variation=TRUE)$x #, nComp=rep(10,ncol(x)))$x
seq(2, ncol(x), 2)
seq(1, ncol(x), 2)
dl <- qu
dl[seq(2, ncol(x), 2)]
head(replaced,2)
head(x,2)
head(replaced,2)
head(x,2)
head(replaced,2)
head(x,2)
head(x)
x[1:6,51:53]
replaced[1:6,51:53]
dl[51:53]
require(zCompositions)
x[,1]==0
repDA <- multKM(x, dl=dl, label=0) ## over DL
repDA2 <- multLN(x, dl=dl, label=0)
repDA3 <- multRepl(x, dl=dl, label=0)
x[191:193,1:7]
aDist(replaced, xorig)
names(repDA2)
aDist(repDA, xorig)
aDist(repDA2, xorig)
aDist(replaced, xorig)
aDist(repDA3, xorig)
rdcm(replaced, xorig)
source("~/workspace/highdimcoda/R/utils.R")
rdcm(replaced, xorig)
rdcm(repDA2, xorig)
rdcm(repDA3, xorig)
gm(replaced[xorig[,1] < quantile(xorig[,1],0.05),1])
gm(repDA2[xorig[,1] < quantile(xorig[,1],0.05),1])
gm(repDA3[xorig[,1] < quantile(xorig[,1],0.05),1])
URL   <- "http://socserv.mcmaster.ca/jfox/Books/Companion/data/Rossi.txt"
Rossi <- read.table(URL, header=TRUE)                  # our data
Rossi[1:3, c("week", "arrest", "fin", "age", "prio")]  # looks like this
library(survival)                                      # for coxph()
fitCPH <- coxph(Surv(week, arrest) ~ fin + age + prio, data=Rossi)    # Cox-PH model
(coefCPH <- coef(fitCPH))                              # estimated coefficients
meanFin  <- mean(as.numeric(Rossi$fin) - 1)   # average of financial aid dummy
meanAge  <- mean(Rossi$age)                   # average age
meanPrio <- mean(Rossi$prio)                  # average number of prior convictions
rMean <- exp(coefCPH["finyes"]*meanFin        # e^Xb
+ coefCPH["age"]   *meanAge
+ coefCPH["prio"]  *meanPrio)
rMean
r1234 <- exp(coefCPH["finyes"]*(as.numeric(Rossi[1:4, "fin"])-1)
+ coefCPH["age"]   *Rossi[1:4, "age"]
+ coefCPH["prio"]  *Rossi[1:4, "prio"])
r1234
dim(Rossi)
r1234 <- exp(coefCPH["finyes"]*(as.numeric(Rossi[, "fin"])-1)
+ coefCPH["age"]   *Rossi[, "age"]
+ coefCPH["prio"]  *Rossi[, "prio"])
length(rr1234)
length(r1234)
rr1234
r1234
Rossi[1:3, c("week", "arrest", "fin", "age", "prio")]  # looks like this
exp(coefCPH["finyes"]
+ coefCPH["age"]
+ coefCPH["prio"] )
coefCPH["finyes"]*Rossi[,"finyes"]
head(Rossi)
coefCPH["finyes"]*as.integer(Rossi[,"fin"])
head(Rossi[,1:5])
head(Rossi[,1:7])
head(Rossi[,1:10])
r1234 <- exp(coefCPH["finyes"]*(as.numeric(Rossi[, "fin"])-1)
+ coefCPH["age"]   *Rossi[, "age"]
+ coefCPH["prio"]  *Rossi[, "prio"])
r1234
coefCPH["finyes"]*(as.numeric(Rossi[, "fin"])-1)
+ coefCPH["age"]   *Rossi[, "age"]
+ coefCPH["prio"]  *Rossi[, "prio"]
exp(coefCPH["finyes"]*(as.numeric(Rossi[, "fin"])-1)
+ coefCPH["age"]   *Rossi[, "age"]
+ coefCPH["prio"]  *Rossi[, "prio"])
names(fitCPH)
fitCPH$coefficients
?predict.coxph
predict(fitCPH, type="expected")
predict(fitCPH, type="lp")
predict(fitCPH,type="terms",se.fit=FALSE)
predict(fitCPH, type="expected")
p1 <- predict(fitCPH, type="expected")
exp(p1)
p1
summary(p1)
survfit(fitCPH,newdata= Rossi[, c("fin", "age", "prio")])
?survfit
survfit(fitCPH
)
aml
head(Rossi[,1:8])
head(Rossi[,1:11])
survfit(fitCPH,newdata= Rossi[, c("fin", "age", "prio")])
URL   <- "http://socserv.mcmaster.ca/jfox/Books/Companion/data/Rossi.txt"
Rossi <- read.table(URL, header=TRUE)                  # our data
Rossi[1:3, c("week", "arrest", "fin", "age", "prio")]  # looks like this
library(survival)                                      # for coxph()
fitCPH <- coxph(Surv(week, arrest) ~ age + prio, data=Rossi)    # Cox-PH model
(coefCPH <- coef(fitCPH))                              # estimated coefficients
meanFin  <- mean(as.numeric(Rossi$fin) - 1)   # average of financial aid dummy
meanAge  <- mean(Rossi$age)                   # average age
meanPrio <- mean(Rossi$prio)                  # average number of prior convictions
rMean <- exp(coefCPH["finyes"]*meanFin        # e^Xb
+ coefCPH["age"]   *meanAge
+ coefCPH["prio"]  *meanPrio)
r1234 <- exp(coefCPH["finyes"]*(as.numeric(Rossi[, "fin"])-1)
+ coefCPH["age"]   *Rossi[, "age"]
+ coefCPH["prio"]  *Rossi[, "prio"])
rMean <- exp(coefCPH["finyes"]*as.integer(Rossi[,"fin"])
+ coefCPH["age"]
+ coefCPH["prio"] )
survfit(fitCPH,newdata= Rossi[, c("age", "prio")])
survfit(fitCPH,newdata= Rossi[, c("fin", "age", "prio")])
library(robCompositions)
variation()
packageVersion("robCompositions")
library(robCompositions)
library(robCompositions)
library(robCompositions)
mvr
library(robCompositions)
mvr
library(robCompositions)
mvr
library(robCompositions)
mvr
library(pls)
mvr
detach(package:pls)
mvr
library(robCompositions)
mvr
install.packages(c('cvTools', 'robustbase', 'ggplot2', 'data.table', 'pls', 'classifly', 'e1071', 'rrcov', 'GGally', 'sROC', 'VIM'))
library(robCompositions)
library(robCompositions)
library(robCompositions)
install.packages("roxygen2")
library(robCompositions)
